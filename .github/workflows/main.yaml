# Do Something here
# This is a placeholder for the main workflow file.
name: Deploy Terraform to AWS
on:
    push:
        branches:
            - "main"

permissions:
    id-token: write
    contents: read
jobs:
    build:
        name: Build Docker Image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
                  aws-region: us-east-1

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build and Push Docker Image
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: test-api
                  WORKER_IMAGE_TAG: worker-${{ github.ref_name }}-latest
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG ./test-api
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$WORKER_IMAGE_TAG

    deploy:
        needs: build
        name: Example Deploy Terraform to AWS
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
                  aws-region: us-east-1

            - name: Terraform setup
              uses: hashicorp/setup-terraform@v3

            - name: Create S3 Bucket for Terraform State
              run: |
                  BUCKET_NAME="terraform-state-lks-aws-cf"
                  # Check if bucket exists
                  if ! aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
                    echo "Creating S3 bucket for Terraform state"
                    aws s3api create-bucket --bucket $BUCKET_NAME --region us-east-1
                    
                    # Enable versioning
                    aws s3api put-bucket-versioning \
                      --bucket $BUCKET_NAME \
                      --versioning-configuration Status=Enabled
                    
                    # Enable server-side encryption
                    aws s3api put-bucket-encryption \
                      --bucket $BUCKET_NAME \
                      --server-side-encryption-configuration '{
                        "Rules": [
                          {
                            "ApplyServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }'
                  else
                    echo "S3 bucket already exists"
                  fi

            - name: Create DynamoDB Table for State Locking
              run: |
                  TABLE_NAME="terraform-state-lock"
                  # Check if table exists
                  if ! aws dynamodb describe-table --table-name $TABLE_NAME 2>/dev/null; then
                    echo "Creating DynamoDB table for state locking"
                    aws dynamodb create-table \
                      --table-name $TABLE_NAME \
                      --attribute-definitions AttributeName=LockID,AttributeType=S \
                      --key-schema AttributeName=LockID,KeyType=HASH \
                      --billing-mode PAY_PER_REQUEST
                  else
                    echo "DynamoDB table already exists"
                  fi

            - name: Create Terraform Backend Config
              run: |
                  cat > backend.tf << EOF
                  terraform {
                    backend "s3" {
                      bucket         = "terraform-state-lks-aws-cf"
                      key            = "terraform.tfstate"
                      region         = "us-east-1"
                      dynamodb_table = "terraform-state-lock"
                      encrypt        = true
                    }
                  }
                  EOF

            - name: Terraform Init
              run: |
                  terraform init

            - name: Terraform Plan
              run: |
                  terraform plan -out=tfplan

            - name: Terraform Apply
              run: |
                  terraform apply -auto-approve tfplan

            - name: End Deploy
              run: echo "Deploy Success"
